// database
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
// generator
generator client {
  provider             = "prisma-client-py"
  // interactive          = "asyncio"
  recursive_type_depth = 5
}

// data models
model User {
  id  String  @id @default(uuid())
  email String  @unique
  name  String?
  password String?
  status String?
  contact String?
  verified Boolean @default(false)
  role Role
  hospitalId String?

  // individualOxygenConsumptions IndividualOxygenConsumption[]
  hospital Hospital? @relation(fields: [hospitalId], references: [id])
  
  departmentId String?
  department Department? @relation(fields: [departmentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken{
  id String @id @default(uuid())
  email String 
  token String @unique  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([email, token])
}

model Hospital {
  id String @id @default(uuid())
  name String
  address String
  city String
  state String
  verified Boolean @default(false)
  country String
  contact_number String
  contact_person String
  email String @unique
  users User[]
  departments Department[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id String @id @default(uuid())
  name String
  hospitalId String
  users User[]
  patients Int @default(0)
  active Boolean @default(true)
  hospital Hospital @relation(fields: [hospitalId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status Boolean @default(true)
  beds Bed[]  
}

enum Role {
  admin
  doctor
  nurse
  therapist 
  technician  
}

 
  model Bed {
  id           String                 @id @default(uuid())
  bed_number   Int
  created_at   DateTime               @default(now())
  updated_at   DateTime               @updatedAt

  oxygen_consumption Float? @default(0)
  sensor_id String?
  department_id String
  department Department @relation(fields: [department_id], references: [id])
  
  daily_consumptions DailyOxygenConsumption[]
  
  sensor_readings SensorReading[]
}

model DailyOxygenConsumption {
  id              String             @id @default(uuid())
  total_consumption Float? @default(0)
  date            String 
  bed_id          String
  bed             Bed                @relation(fields: [bed_id], references: [id])
  
  sensor_readings SensorReading[] 

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
 
  @@unique([bed_id, date])
}

model SensorReading {
  id           String                 @id @default(uuid())
  timestamp    DateTime               @default(now())
  oxygen_flow  Float                  // Oxygen flow rate in liters per minute
  duration     Float                  // Duration in minutes
  input_type   String?
  bed_id String
  bed Bed @relation(fields: [bed_id], references: [id])
  
  daily_consumption_id String
  daily_consumption DailyOxygenConsumption @relation(fields: [daily_consumption_id], references: [id])
 }
