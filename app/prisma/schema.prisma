// database
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
// generator
generator client {
  provider             = "prisma-client-py"
  // interactive          = "asyncio"
  recursive_type_depth = 5
}

// data models
model User {
  id  String  @id @default(uuid())
  email String  @unique
  name  String?
  password String?
  status String?
  contact String?
  verified Boolean @default(false)
  role Role
  hospitalId String?

  individualOxygenConsumptions IndividualOxygenConsumption[]
  hospital Hospital? @relation(fields: [hospitalId], references: [id])
  
  departmentId String?
  department Department? @relation(fields: [departmentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken{
  id String @id @default(uuid())
  email String 
  token String @unique  
  @@unique([email, token])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Hospital {
  id String @id @default(uuid())
  name String
  address String
  city String
  state String
  verified Boolean @default(false)
  country String
  contact_number String
  contact_person String
  email String @unique
  users User[]
  departments Department[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Department {
  id String @id @default(uuid())
  name String
  hospitalId String
  users User[]
  patients Int @default(0)
  active Boolean @default(true)
  hospital Hospital @relation(fields: [hospitalId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status Boolean @default(true)
  individualOxygenConsumptions IndividualOxygenConsumption[]
  dailyOxygenConsumptions DailyOxygenConsumption[]

}

enum Role {
  admin
  doctor
  nurse
  therapist 
  technician  
}


model IndividualOxygenConsumption {
  id                   String      @id @default(uuid())
  department_id        String
  bed_number           Int
  nurse_id             String?      // Nullable if recorded by a sensor
  sensor_id            Int?      // Nullable if manually entered
  oxygen_consumption   Float     // Oxygen consumption in liters
  is_first_time_usage      Boolean   @default(false) // Whether this is the first time for current treatment
  timestamp           DateTime  @default(now())
  remarks             String?   // Optional notes for corrections
  daily_oxygen_consumption_id String?
  daily_oxygen_consumption DailyOxygenConsumption? @relation(fields: [daily_oxygen_consumption_id], references: [id])
  department          Department? @relation(fields: [department_id], references: [id])
  nurse               User?     @relation(fields: [nurse_id], references: [id])
  
}
model DailyOxygenConsumption {
  id                  String      @id @default(uuid())
  department_id        String
  total_consumption    Float       @default(0)
  date              DateTime  @default(dbgenerated("(CURRENT_DATE)"))
  last_updated       DateTime  @default(now())
  patients_count     Int       @default(0)
  individualOxygenConsumptions IndividualOxygenConsumption[]
  department        Department @relation(fields: [department_id], references: [id], onDelete: Cascade)

  @@unique([department_id, date]) // Ensure one record per department per day
}

  
